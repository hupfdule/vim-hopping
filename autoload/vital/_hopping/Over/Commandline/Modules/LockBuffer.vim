" ___vital___
" NOTE: lines between '" ___vital___' is generated by :Vitalize.
" Do not mofidify the code nor insert new lines before '" ___vital___'
if v:version > 703 || v:version == 703 && has('patch1170')
  function! vital#_hopping#Over#Commandline#Modules#LockBuffer#import() abort
    return map({'_vital_depends': '', 'make': '', '_vital_loaded': ''},  'function("s:" . v:key)')
  endfunction
else
  function! s:_SID() abort
    return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')
  endfunction
  execute join(['function! vital#_hopping#Over#Commandline#Modules#LockBuffer#import() abort', printf("return map({'_vital_depends': '', 'make': '', '_vital_loaded': ''}, \"function('<SNR>%s_' . v:key)\")", s:_SID()), 'endfunction'], "\n")
  delfunction s:_SID
endif
" ___vital___
scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim


function! s:_vital_loaded(V)
	let s:V = a:V
	let s:Rocker = s:V.import("Unlocker.Rocker")
	let s:Holder = s:V.import("Unlocker.Holder")
	let s:Undo = s:V.import("Unlocker.Rocker.Undotree")
endfunction


function! s:_vital_depends()
	return [
\		"Unlocker.Rocker",
\		"Unlocker.Rocker.Undotree",
\		"Unlocker.Holder",
\	]
endfunction




let s:module = {
\	"name" : "LockBuffer"
\}


function! s:module.on_enter(...)
	let self.__locker = s:Rocker.lock(
\		s:Holder.make("Buffer.Text", "%"),
\		"&l:modified",
\		s:Undo.make()
\	)
endfunction


function! s:module.on_execute_pre(...)
	call self.__locker.unlock()
endfunction


function! s:module.on_leave(...)
	call self.__locker.unlock()
endfunction


function! s:make()
	return deepcopy(s:module)
endfunction

let &cpo = s:save_cpo
unlet s:save_cpo
